#!/bin/bash
set -e

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$SCRIPT_DIR"
cd ../
cd packages/${PACKAGE_NAME}

if [[ -f "../../packages/${PACKAGE_SOURCE_NAME}/CMakeLists.txt" ]]; then
  export PACKAGE_CPP_SOURCE="$( cd ../../packages/${PACKAGE_SOURCE_NAME} && pwd )"
else
  LANG_VECTOR_PATH="$( node -p "require('@o2ter/lang-vector').include.slice(1,-1)" )"
  if [[ -f "${LANG_VECTOR_PATH}/packages/${PACKAGE_SOURCE_NAME}/CMakeLists.txt" ]]; then
    export PACKAGE_CPP_SOURCE="$( cd "${LANG_VECTOR_PATH}/packages/${PACKAGE_SOURCE_NAME}" && pwd )"
  fi
fi

if [[ -z "${PACKAGE_CPP_SOURCE}" ]]; then
  echo "Package ${PACKAGE_SOURCE_NAME} not found" 1>&2
  exit 1
fi

SYSTEM_NAME="$(uname -s | tr '[:upper:]' '[:lower:]')"
SYSTEM_ARCH="$(uname -m)"

PREBUILD_DIR=""

if [[ "${SYSTEM_NAME}-${SYSTEM_ARCH}" = "darwin-arm64" ]]; then
  PREBUILD_DIR="macos.arch_arm64.release"
elif [[ -n "$(uname -a | grep Ubuntu)" ]]; then
  if [[ -x "$(command -v nvcc)" ]]; then
    PREBUILD_DIR="ubuntu-cuda.arch_${SYSTEM_ARCH}.release"
  elif [[ -x "$(command -v vulkaninfo)" ]]; then
    PREBUILD_DIR="ubuntu-vulkan.arch_${SYSTEM_ARCH}.release"
  else
    PREBUILD_DIR="ubuntu.arch_${SYSTEM_ARCH}.release"
  fi
fi

if [[ -f "./build/Release/${PREBUILD_DIR}/llama-node.node" ]]; then
  cp "./build/Release/${PREBUILD_DIR}/llama-node.node" "./build/Release/llama-node.node"
  exit 0
fi

EXTRA_OPTIONS=""

if [[ -x "$(command -v nvcc)" ]]; then
  EXTRA_OPTIONS="${EXTRA_OPTIONS} --CDGGML_CUDA=ON"
elif [[ -x "$(command -v vulkaninfo)" ]]; then
  EXTRA_OPTIONS="${EXTRA_OPTIONS} --CDGGML_VULKAN=ON"
fi

if [[ -n "${TARGET_ARCH}" && "${TARGET_ARCH}" != "${SYSTEM_ARCH}" ]]; then
  TOOLCHAIN_DIR="$( cd ../../toolchains && pwd )"
  EXTRA_OPTIONS="${EXTRA_OPTIONS} --CDCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_DIR}/"${SYSTEM_NAME}".target-${TARGET_ARCH}.cmake"
fi

cmake-js compile --CDPACKAGE_CPP_SOURCE=${PACKAGE_CPP_SOURCE} ${EXTRA_OPTIONS}

if [[ -f "./build/${PACKAGE_NAME}.node" ]]; then
  mkdir -p ./build/Release/
  mv ./build/${PACKAGE_NAME}.node ./build/Release/
fi