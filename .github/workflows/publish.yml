name: Publish Package
on:
  release:
    types: [created]
jobs:
  macos:
    name: macos arch_${{ matrix.target_arch }}
    runs-on: macOS-latest
    strategy:
      fail-fast: false
      matrix:
        target_arch: ['arm64']
    env:
      TARGET_ARCH: ${{ matrix.target_arch }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-node@v3
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
      - run: yarn install
      - uses: actions/upload-artifact@v4
        with:
          name: macos.arch_${{ matrix.target_arch }}.release
          path: packages/llama-node/build/Release/**/*
  ubuntu:
    name: ubuntu arch_${{ matrix.target_arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target_arch: ['aarch64', 'armv7l', 'x86_64']
    env:
      TARGET_ARCH: ${{ matrix.target_arch }}
    steps:
      - name: Install dependencies on Ubuntu
        if: matrix.target_arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake libtbb-dev g++-aarch64-linux-gnu gcc-aarch64-linux-gnu
          
          which aarch64-linux-gnu-gcc
          which aarch64-linux-gnu-g++
      - name: Install dependencies on Ubuntu
        if: matrix.target_arch == 'armv7l'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake libtbb-dev g++-arm-linux-gnueabihf gcc-arm-linux-gnueabihf
          
          which arm-linux-gnueabihf-gcc
          which arm-linux-gnueabihf-g++
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-node@v3
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
      - run: yarn install
      - uses: actions/upload-artifact@v4
        with:
          name: ubuntu.arch_${{ matrix.target_arch }}.release
          path: packages/llama-node/build/Release/**/*
  ubuntu-cuda:
    name: ubuntu-cuda arch_${{ matrix.target_arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target_arch: ['x86_64']
    env:
      TARGET_ARCH: ${{ matrix.target_arch }}
    steps:
      - uses: Jimver/cuda-toolkit@v0.2.16
        id: cuda-toolkit
        with:
          cuda: '12.5.0'
          log-file-suffix: 'arch_${{ matrix.target_arch }}.txt'
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-node@v3
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
      - run: yarn install
      - uses: actions/upload-artifact@v4
        with:
          name: ubuntu-cuda.arch_${{ matrix.target_arch }}.release
          path: packages/llama-node/build/Release/**/*
  ubuntu-vulkan:
    name: ubuntu-vulkan arch_${{ matrix.target_arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target_arch: ['x86_64']
    env:
      TARGET_ARCH: ${{ matrix.target_arch }}
    steps:
      - name: Install Vulkan SDK on Ubuntu
        run: |
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list https://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
          sudo apt update
          sudo apt install vulkan-sdk
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-node@v3
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
      - run: yarn install
      - uses: actions/upload-artifact@v4
        with:
          name: ubuntu-vulkan.arch_${{ matrix.target_arch }}.release
          path: packages/llama-node/build/Release/**/*
  publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    needs:
      - macos
      - ubuntu
      - ubuntu-cuda
      - ubuntu-vulkan
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-node@v3
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
      - name: Update npm & yarn
        run: npm install -g npm@latest yarn@latest
      - run: yarn install && yarn rollup
        env:
          SKIP_BUILD_BIN: 1
      - uses: actions/download-artifact@v4
        with:
          path: packages/llama-node/build/Release/
      - run: git config --global user.name "${{ github.actor }}"
      - run: git config --global user.email "github-action-${{ github.actor }}@users.noreply.github.com"
      - run: npm version ${{ github.event.release.tag_name }}
      - run: npm publish --access public
