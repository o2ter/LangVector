name: Test
on: [push, pull_request]
jobs:
  macos:
    name: macos node ${{ matrix.node_version }}
    runs-on: macOS-latest
    strategy:
      fail-fast: false
      matrix:
        node_version: ['18.x', '20.x', '22.x']
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          registry-url: 'https://registry.npmjs.org'
      - run: yarn install
      - name: Test rollup
        run: yarn rollup
      - uses: actions/upload-artifact@v4
        with:
          name: macos-node-${{ matrix.node_version }}-release
          path: packages/llama-node/build/Release
  ubuntu:
    name: ubuntu node ${{ matrix.node_version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node_version: ['18.x', '20.x', '22.x']
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          registry-url: 'https://registry.npmjs.org'
      - run: yarn install
      - name: Test rollup
        run: yarn rollup
      - uses: actions/upload-artifact@v4
        with:
          name: ubuntu-node-${{ matrix.node_version }}-release
          path: packages/llama-node/build/Release
  ubuntu-cuda:
    name: ubuntu-cuda node ${{ matrix.node_version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node_version: ['18.x', '20.x', '22.x']
    steps:
      - uses: Jimver/cuda-toolkit@v0.2.16
        id: cuda-toolkit
        with:
          cuda: '12.5.0'
          log-file-suffix: '${{ matrix.node_version }}.txt'
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          registry-url: 'https://registry.npmjs.org'
      - run: yarn install
      - name: Test rollup
        run: yarn rollup
      - uses: actions/upload-artifact@v4
        with:
          name: ubuntu-cuda-node-${{ matrix.node_version }}-release
          path: packages/llama-node/build/Release
  ubuntu-vulkan:
    name: ubuntu-vulkan node ${{ matrix.node_version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node_version: ['18.x', '20.x', '22.x']
    steps:
      - name: Install Vulkan SDK on Ubuntu
        run: |
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list https://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
          sudo apt update
          sudo apt install vulkan-sdk
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          registry-url: 'https://registry.npmjs.org'
      - run: yarn install
      - name: Test rollup
        run: yarn rollup
      - uses: actions/upload-artifact@v4
        with:
          name: ubuntu-vulkan-node-${{ matrix.node_version }}-release
          path: packages/llama-node/build/Release